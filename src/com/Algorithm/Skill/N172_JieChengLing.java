package com.Algorithm.Skill;

/**
 * 172. 阶乘后的零
 * 给定一个整数 n ，返回 n! 结果中尾随零的数量。
 * <p>
 * 提示 n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：n = 3
 * 输出：0
 * 解释：3! = 6 ，不含尾随 0
 * 示例 2：
 * <p>
 * 输入：n = 5
 * 输出：1
 * 解释：5! = 120 ，有一个尾随 0
 * 示例 3：
 * <p>
 * 输入：n = 0
 * 输出：0
 */
public class N172_JieChengLing {
    //末尾0是通过乘10得到，也就是2*5，所以要统计2 5对的个数，但是通过分析发现2管够，所以只需要关心5的个数
    //我们把每个乘数再稍微分解下，看一个例子。
    //11! = 11 * 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 = 11 * (2 * 5) * 9 * (4 * 2) * 7 * (3 * 2) * (1 * 5) * (2 * 2) * 3 * (1 * 2) * 1
    //对于含有 2 的因子的话是 1 * 2, 2 * 2, 3 * 2, 4 * 2 ...
    //对于含有 5 的因子的话是 1 * 5, 2 * 5...
    //含有 2 的因子每两个出现一次，含有 5 的因子每 5 个出现一次，所有 2 出现的个数远远多于 5，换言之找到一个 5，一定能找到一个 2 与之配对。所以我们只需要找有多少个 5。
    //直接的，我们只需要判断每个累乘的数有多少个 5 的因子即可。
    public int trailingZeroes(int n) {
        int count = 0;
        for (int i = 1; i <= n; i++) {
            int tem = i;
            while (tem > 0) {
                if (tem % 5 == 0) {
                    count++;
                    tem /= 5;
                } else {
                    break;
                }
            }
        }
        return count;
    }

    //进阶，经过分析发现每隔五个数就会出现一次5，所以算出n/5等于多少就行，但是每隔25会出现两个5，每隔125会出现三个5，所以先算一个5，再算两个5以此类推，知道超过输入值
    public int trailingZeroes1(int n) {
        int count = 0;
        while (n > 0) {
            count += n / 5;
            n /= 5;
        }
        return count;
    }

}
