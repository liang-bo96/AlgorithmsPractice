/**
 * ?????????????????????
 * ????????????????????????add??size
 * д???????????1???10???????????У????2??????????????????????5????????2?????????????
 * 
 * ??lists???volatile???t2???????????????t2??????????????cpu??????????????????????????
 * 
 * ???????wait??notify??????wait???????????notify?????????
 * ???????????????????????????????t2????У????????????t2?????????
 * 
 * ??????????????????????
 * ???????????????????size=5?t2?????????t1?????t2?????????????
 * ?????????????
 * 
 * notify???t1???????????t2??????????notify????t1???????
 * ???????????????
 * 
 * ???Latch??????????wait notify????????
 * ?????????????????????????????
 * ???await??countdown???????wait??notify
 * CountDownLatch???漰????????count????????????????????
 * ?????漰?????????漰????????????synchronized + wait/notify??????????
 * ?????????countdownlatch/cyclicbarrier/semaphore
 * @author mashibing
 */
package com.mashibing.juc.c_020_01_Interview;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.locks.LockSupport;

//TODO park unpark

public class T07_LockSupport_WithoutSleep {

	// ???volatile???t2????????
	volatile List lists = new ArrayList();

	public void add(Object o) {
		lists.add(o);
	}

	public int size() {
		return lists.size();
	}

	static Thread t1 = null, t2 = null;

	public static void main(String[] args) {
		T07_LockSupport_WithoutSleep c = new T07_LockSupport_WithoutSleep();

		t1 = new Thread(() -> {
			System.out.println("t1????");
			for (int i = 0; i < 10; i++) {
				c.add(new Object());
				System.out.println("add " + i);

				if (c.size() == 5) {
					LockSupport.unpark(t2);
					LockSupport.park();
				}
			}
		}, "t1");

		t2 = new Thread(() -> {
			//System.out.println("t2????");
			//if (c.size() != 5) {

				LockSupport.park();

			//}
			System.out.println("t2 ????");
			LockSupport.unpark(t1);


		}, "t2");

		t2.start();
		t1.start();





	}
}
